// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model School {
  id        String   @id @default(cuid())
  name      String
  domain    String   @unique // e.g., "riverside-middle"
  settings  Json?    // Store zone thresholds, behavior policies, etc.
  plan      String   @default("basic") // subscription plan
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users     User[]
  students  Student[]
  incidents Incident[]

  @@map("schools")
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  password          String
  firstName         String
  lastName          String
  role              UserRole  @default(TEACHER)
  schoolId          String
  isActive          Boolean   @default(true)
  emailVerified     Boolean   @default(false)
  passwordResetToken String?
  passwordResetExpires DateTime?
  lastLogin         DateTime?
  loginAttempts     Int       @default(0)
  lockoutUntil      DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  school            School     @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  reportedIncidents Incident[] @relation("IncidentReporter")

  @@map("users")
}

model Student {
  id        String   @id @default(cuid())
  studentId String?  // School's internal student ID
  firstName String
  lastName  String
  grade     String
  schoolId  String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  school    School     @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  incidents Incident[]

  // Computed field for full name
  @@map("students")
}

model Incident {
  id             String            @id @default(cuid())
  studentId      String
  reporterId     String
  incidentType   String
  severity       IncidentSeverity
  location       String?
  description    String?
  dateOccurred   DateTime
  timeOccurred   String?
  pointsAssigned Int               @default(0)
  actionTaken    String?
  schoolId       String
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  // Relations
  student  Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  reporter User    @relation("IncidentReporter", fields: [reporterId], references: [id])
  school   School  @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  @@map("incidents")
}

model BehaviorPointsHistory {
  id                String   @id @default(cuid())
  studentId         String
  incidentId        String?
  pointsChange      Int
  totalPointsAfter  Int
  reason            String?
  createdAt         DateTime @default(now())

  @@map("behavior_points_history")
}

// Enums
enum UserRole {
  ADMIN
  PRINCIPAL
  TEACHER
  STAFF
}

enum IncidentSeverity {
  MINOR
  MAJOR
  SEVERE
} 