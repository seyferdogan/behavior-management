version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: behavior-postgres
    environment:
      POSTGRES_DB: behavior_management
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - behavior-network

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: behavior-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - behavior-network

  # Backend API
  backend:
    build:
      context: ./behavior-management-backend
      dockerfile: Dockerfile
      target: production
    container_name: behavior-backend
    environment:
      NODE_ENV: production
      DB_TYPE: postgresql
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres123
      DB_NAME: behavior_management
      DB_SSL: false
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      PORT: 3001
      FRONTEND_URL: http://localhost:3000
      REDIS_URL: redis://redis:6379
    volumes:
      - ./behavior-management-backend/backups:/app/backups
      - ./behavior-management-backend/logs:/app/logs
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - behavior-network
    restart: unless-stopped

  # Frontend React App
  frontend:
    build:
      context: ./behavior_system
      dockerfile: Dockerfile
      target: production
    container_name: behavior-frontend
    ports:
      - "3000:80"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - behavior-network
    restart: unless-stopped

  # Nginx Reverse Proxy (Optional - for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: behavior-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - behavior-network
    restart: unless-stopped
    profiles:
      - production

  # Database Management Tool (Optional)
  adminer:
    image: adminer:latest
    container_name: behavior-adminer
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    networks:
      - behavior-network
    profiles:
      - development

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  behavior-network:
    driver: bridge 